# Default values for mongo.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

appname: &appname broker

nameOverride: ""
fullnameOverride: ""

deployment:

  podAnnotations: { }
  podLabels:
    app: *appname

  image:
    repository: ggorockee/microservice
    pullPolicy: IfNotPresent
    # Overrides the image tag whose default is the chart appVersion.
    tag: "broker-alpine3.20-k8s-4"
  imagePullSecrets: []

  replicas: 1

  secret: {}

  securityContext: { }
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
    # runAsUser: 1000

  podSecurityContext: { }
  # fsGroup: 2000

  livenessProbe: {}
    # httpGet:
    #  path: /
    #  port: http
  readinessProbe: {}
    # httpGet:
    #  path: /
    #  port: http

  resources:
    requests:
      memory: "64Mi"
      cpu: "250m"
    limits:
      memory: "128Mi"
      cpu: "500m"
    # We usually recommend not to specify default resources and to leave this as a conscious
    # choice for the user. This also increases chances charts run on environments with little
    # resources, such as Minikube. If you do want to specify resources, uncomment the following
    # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
    # limits:
    #   cpu: 100m
    #   memory: 128Mi
    # requests:
    #   cpu: 100m
    #   memory: 128Mi

  volumeMounts: [ ]
    # - name: foo
    #   mountPath: "/etc/foo"
    #   readOnly: true

  # Additional volumes on the output Deployment definition.
  volumes: [ ]
  # - name: foo
  #   secret:
  #     secretName: mysecret
  #     optional: false

  nodeSelector: { }

  tolerations: [ ]

  affinity: { }

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  ports:
  - portName: broker
    port: 5672
    containerPort: 5672
  - portName: http
    port: 80
    containerPort: 80

ingress:
  enabled: true

  className: "nginx"

  annotations: {}

  hosts:
    - paths:
        - path: /api/v1
          pathType: Prefix
      host: localhost
      port: 80

mongo:
  deployment:
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

rabbit:
  deployment:
    resources:
      requests:
        memory: "128Mi"
        cpu: "250m"
      limits:
        memory: "512Mi"
        cpu: "500m"

mailhog:
  enabled: true
  deployment:
    image:
      repository: mailhog/mailhog
      pullPolicy: IfNotPresent
      tag: "latest"

    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

    secret: {}

  service:
    ports:
      - name: smtp-port
        port: 1025
        targetPort: 1025
      - name: web-port
        port: 8025
        targetPort: 8025


mailer:
  enabled: true
  deployment:
    image:
      repository: ggorockee/microservice
      pullPolicy: IfNotPresent
      tag: mailer-alpine3.20-k8s-1

    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

    secret:
      MAIL_DOMAIN: "logs"
      MAIL_HOST: "broker-mailer"
      MAIL_PORT: "1025"
      MAIL_ENCRYPTION: "none"
      MAIL_USERNAME: ""
      MAIL_PASSWORD: ""
      FROM_NAME: "ggorockee"
      FROM_ADDRESS: "admin@example.com"

  service:
    ports:
      - name: main-port
        port: 80
        targetPort: 80


logger:
  enabled: true
  deployment:
    replicas: 1
    image:
      repository: ggorockee/microservice
      pullPolicy: IfNotPresent
      tag: logger-alpine3.20-k8s-1
    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

    secret: {}

  service:
    ports:
      - name: web-port
        port: 80
        targetPort: 80
      - name: rpc-port
        port: 5001
        targetPort: 5001
      - name: grpc-port
        port: 50001
        targetPort: 50001

postgres:
  appname: postgres
  deployment:
    replicas: 1

    image:
      repository: postgres
      pullPolicy: IfNotPresent
      tag: "14.0"

    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

    secret:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: users

    volumeMounts:
      - name: &db-data postgres-db-data
        mountPath: /var/lib/postgresql/data

    volumes:
      - name: *db-data
        emptyDir: {}

  service:
    type: ClusterIP
    ports:
      - port: 5432
        targetPort: 5432
        name: postgres-port

auth:
  appname: auth
  deployment:
    replicas: 1

    image:
      repository: ggorockee/microservice
      pullPolicy: IfNotPresent
      tag: "auth-alpine3.20-k8s-2"

    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

    secret: {}

    volumeMounts: []

    volumes: []

  service:
    type: ClusterIP
    ports:
      - port: 80
        targetPort: 80
        name: auth-port

frontend:
  ingress:
    enabled: true

    className: "nginx"

    annotations: {}

    hosts:
      - paths:
          - path: /
            pathType: Prefix
        host: localhost
        port: &svc1_port 8080

  service:
    type: ClusterIP
    ports:
      - port: *svc1_port
        targetPort: 8080
        name: frontend

  deployment:
    appname: front
    replicas: 1

    image:
      repository: ggorockee/microservice
      pullPolicy: IfNotPresent
      tag: "front-alpine3.20-k8s-9"

    resources:
      requests:
        memory: "64Mi"
        cpu: "250m"
      limits:
        memory: "128Mi"
        cpu: "500m"

    secret: { }

    volumeMounts: [ ]

    volumes: [ ]